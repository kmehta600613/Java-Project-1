/*
 This program should ask the user for a positive integer less than or equal to 100, and then perform a range check where the number must 
 be between 0 and 100. If the input passes the check, then the program should use it as the first element of the sequence, compute and 
 output the sequence as per the formulas, until the last element precedes the element 1. The program should generate the sequence in
 lines of 20 elements, wrapping odd integers in parentheses and even integers in square brackets.
 
 C(i+1) = Ci/2            if n = 0( i mod 2)
          6 * Ci + 2      if n = 1 (i mod 2)
 
 */

import java.util.Scanner;
public class SequenceGenerator {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		System.out.println("Welcome to The Sequence Generator");
		System.out.println("---------------------------------");
		Scanner keyboard = new Scanner(System.in);
		System.out.print("Please enter a positive integer no more than 100: ");
		int number = keyboard.nextInt();	
		
		assert number > 0 && number < 101;
		/*
		The assertion statement ensures that the input is between 0 and 100. If it is not, then the program outputs an error.
		NOTE: In order for assertions to work, they must be enabled by configuring the settings of your IDE.
		 */
		int counter = 0; // A counter is added and initialized.
		if (number%2 == 0) { // By calculating the modulus of the inputed number, we can tell whether the number is even or odd so we can add parentheses or square brackets accordingly . 
			System.out.print("[" + number + "]");
			counter++; // The counter variable adds 1 to itself every time a new element is printed. 
		} else {
			System.out.print("(" + number + ")");
			counter++;
		}
		
		while (number > 2) { // This ensures that the while loop terminates before reaching the element 1
			if (number%2 == 0){
				int evenNumber = number/2;
				if (evenNumber%2 == 0) {
					System.out.print("[" + evenNumber + "]");
					counter++;
				}else {
					System.out.print("(" + evenNumber + ")");
					counter++;
				}
				number = evenNumber; // This reassigns the new calculated even number to the variable number, and the loop is executed again with this new even number. 
			} else {
				System.out.print("[" + ((number * 6) + 2) + "]");
				int oddNumber = ((number * 6) + 2);
				number = oddNumber; // The same happens here as with evenNumber above, and loop continues like this until it reaches the element 2.
				counter++;
			} if (counter%20 == 0) {
				System.out.printf("%n");
				/*
				 This checks if the program has printed 20 elements by checking whether the modulus of the variable counter is 0.
				 Remember that all the counter++ lines you see above means that counter is incrementing by 1 every time. If the modulus
				 is 0, then a new line is printed.
				 */
			}
		}
	}
}	


