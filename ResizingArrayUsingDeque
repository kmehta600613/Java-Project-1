import java.util.Iterator;



public class ResizingArrayDeque<Item> implements Iterable<Item> {
	
	private int capacity = 1;
	private Item[] a = (Item[]) new Object[capacity];
	private int n = 0;
	private int first;
	private int last = capacity - 1;
	
	
	public boolean isEmpty() {
		return n == 0;
	}
	
	public int size(){
		return n;
	}
	
	private void resize(int max){
		Item[] temp = (Item[]) new Object[max];
		for (int i = 0; i < n; i++)
			temp[i] = a[i];
		a = temp;
	}
	
	public void pushLeft(Item item){
		if (n == a.length) {
			resize(2*a.length);
		}
		if (first == 0){
			first = a.length - 1;
		} else {
			first--;
		}
		a[first] = item;
		if (first == a.length){
			first = 0;
		}
		n++;
		
	}
	
	public void pushRight(Item item){
		if (n == a.length){
			resize(2*a.length);
		}
		last = (last + 1) % a.length;
		a[last] = item;
		if (last == a.length){
			last = 0;
		}
		n++;
	}
	
	public Item popLeft(){
		Item item = a[first];
		first = (first + 1) % a.length;
		n--;
		if (first > 0 && n == a.length/4) {
			resize(a.length/2);
		}
		return item;
	}
	public Item popRight(){
		Item item = a[last];
		if (last == 0){
			last = a.length - 1;
		}else {
			last--;
		}
		n--;
		if (n > 0 && n == a.length/4){
			resize(a.length/2);
		}
		return item;
	}
	

	@Override
	public Iterator<Item> iterator() {
		// TODO Auto-generated method stub
		return null;
	}

}
