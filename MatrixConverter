import java.util.Scanner;


class MatrixConverter {
	
	/*
	   * =========================================================================
	   *  Method convert(): converts matrix input by pushing even-indexed rows 
	   *    and columns up / left, odd-indexed ones down / right.
	   *
	   *  Input  : Matrix input -- the matrix to be converted
	   *  Output : Matrix -- the converted matrix
	   * =========================================================================
	   */

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		 int rows, columns;
		    Matrix input, output;
		    Scanner keyboard = new Scanner(System.in); 

		    System.out.println("Welcome to The Matrix Converter");
		    System.out.println("-------------------------------");

		    // Prompt user for input.

		    System.out.print("Please input the number of rows: ");
		    rows = keyboard.nextInt();
		    System.out.print("Please input the number of columns: ");
		    columns = keyboard.nextInt();

		    // Generate a matrix

		    input = new Matrix(rows, columns);
		    for (int i = 0; i < rows; i++) {
		      for (int j = 0; j < columns; j++) {
		        input.setElement(i, j, i * 10 + j);
		      }
		    }

		    // Print the generated matrix

		    System.out.println("The original matrix");
		    input.print();

		    // Print the converted matrix

		    output = convert(input);
		    System.out.println("The converted matrix");
		    output.print();

		  }
		  public static Matrix convert (Matrix input) {
			  int newRows = input.getRowsNum();
			  int newColumns = input.getColumnsNum();
			  int counter = newRows/2;  
			  int counter1 = newColumns/2; 
			  Matrix step1 = new Matrix(newRows, newColumns);
			  for (int i = 0; i < newRows; i++) {
				  for (int j = 0; j < newColumns; j++) {
					  int element = input.getElement(i, j);
					  if (i%2 == 0 && step1.inBounds(i/2, j)) {
						  step1.setElement(i/2, j, element);
					  }else if (i == 0) {
						  step1.setElement(i, j, element); 
			
					  }
					 for (int n = 0; n < counter; n++){
						 if (i == (newRows - 1) && i%2 != 0){
							 step1.setElement(i, j, element);
						 }else if (i%2 != 0 && step1.inBounds(i + counter - n, j)){
							 step1.setElement(i + counter - n, j, element);
						 }
					 }
					 
					  }
		  }
			 int newRows1 = step1.getRowsNum();
			 int newColumns1 = step1.getColumnsNum();
			 Matrix step2 = new Matrix(newRows1, newColumns1);
			for (int m = 0; m < newRows1; m++){
				for (int n = 0; n < newColumns1; n++){
					int element = step1.getElement(m, n);
					if (n%2 == 0 && step2.inBounds(m, n/2)) {
						  step2.setElement(m, n/2, element);
					  }
					 for (int l = 0; l < counter1; l++){
						 if (n == (newColumns1 - 1) && n%2 != 0){
							 step2.setElement(m, n, element); 
						 }else if (n%2 != 0 && step2.inBounds(m, n + counter1 - l)){
							 step2.setElement(m, n + counter1 - l, element);
						 }
				}
			}
		} 
			
			return step2;
	}
			
}
