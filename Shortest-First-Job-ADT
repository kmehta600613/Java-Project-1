/*
 * @author Kshitij Mehta
 * 
 * The following class consists of an Abstract Data Type called Job. 
 */
package sort;

public class Job implements Comparable<Job>{
	/*
	 * A Job object is created by using the inputs declared below.
	 */
	private String jobID;
	private int processingTime;
	private int arrivalTime;
	
	/*
	 * This is a constructor for Job()
	 * @param id This is Job ID or the Job Name
	 * @param pTime This is the execution or processing time of the job
	 * @param aTime This is the arrival time of the job 
	 */
	
	public Job(String id, int pTime, int aTime)
	{
		this.jobID = id;
		this.processingTime = pTime;
		this.arrivalTime = aTime;
	}
	
	/*
	 * This method retrieves the processing time
	 * @return int The processing time
	 */
	public int getProcessingTime()
	{
		return processingTime;
	}
	
	/*
	 * This method can be used to set the processing time.
	 * @param t The new processing time of a job
	 */
	public void setProcessingTime(int t)
	{
		this.processingTime = t;
	}
	
	/*
	 * This method retrieves the arrival time
	 * @return int The arrival time
	 */
	public int getArrivalTime()
	{
		return arrivalTime;
	}
	
	/*
	 * This method can be used to set the arrival time.
	 * @param t The new arrival time of a job
	 */
	public void setArrivalTime(int t)
	{
		this.arrivalTime = t;
	}
	
	/*
	 * This method retrieves the job ID
	 * @return String The Job ID
	 */
	public String getJobID()
	{
		return jobID;
	}
	/*
	 * This method can be used to set the job ID.
	 * @param id The new ID of a job
	 */
	public void setJobID(String id)
	{
		this.jobID = id;
	}
	
	/*
	 * (non-Javadoc)
	 * @see java.lang.Comparable#compareTo(java.lang.Object)
	 * 
	 * This method compares the arrival times of two jobs and assigns -1 or 1 if the job entered as the parameter is greater than the original job
	 * or if its greater respectively. In the case where the arrival times are equal, the same logic is performed with the processing times of the
	 * two jobs. If both the arrival times and processing times are equal, then the method returns 0.
	 * @param other Another job to compare with
	 * @return int -1, 1 or 0 depending on the comparison
	 */
	
	@Override
	public int compareTo(Job other)
	{
		int a = 0;
		if(this.arrivalTime < other.arrivalTime){
			a = -1;
		}
		else if(this.arrivalTime > other.arrivalTime){
			a = 1;
		}
		else if(this.processingTime < other.processingTime){
				a = -1;
		}else if(this.processingTime > other.processingTime){
				a = 1;
		}else {
			a = 0;
		}
		return a;
		
	}
	
	/*
	 * (non-Javadoc)
	 * @see java.lang.Object#toString()
	 * 
	 * This method converts the fields of Job() using String.format
	 */
	
	public String toString()
	{
		return String.format("%s %1d %1d", jobID, processingTime, arrivalTime);
	}

}
