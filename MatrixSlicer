/*

This program prompts the user for the number of rows and columns, creates a matrix, and prompts the user again for
a row and column index. It then outputs the elements in the row and column at the indices entered and it also outputs
the element that are in a diagonal and consists of the element at that row and column index.

 */



import java.util.Scanner;
import java.util.Arrays;

class MatrixSlicer {
	public static void main(String args[]) {

	    int rows, columns, row, column;
	    Matrix input;
	    Scanner keyboard = new Scanner(System.in); // Input scanner.

	    // Print welcome message.

	    System.out.println("Welcome to The Matrix Slicer");
	    System.out.println("----------------------------");

	    // Prompt user for input.

	    System.out.print("Please input the number of rows: ");
	    rows = keyboard.nextInt();
	    System.out.print("Please input the number of columns: ");
	    columns = keyboard.nextInt();

	    // Generate a matrix

	    input = new Matrix(rows, columns);
	    for (int i = 0; i < rows; i++) {
	      for (int j = 0; j < columns; j++) {
	        input.setElement(i, j, i * 10 + j);
	      }
	    }

	    // Print the generated matrix

	    System.out.println("The original matrix");
	    input.print();

	    // Prompt user for input.

	    System.out.print("Please input the row index (starting from 0): ");
	    row = keyboard.nextInt();
	    System.out.print("Please input the column index (starting from 0): ");
	    column = keyboard.nextInt();


	    System.out.println("The row slice:");
	    System.out.println(Arrays.toString(getRow(input, row)));
	    System.out.println("The column slice:");
	    System.out.println(Arrays.toString(getColumn(input, column)));
	    System.out.println("The diagonal slice:");
	    System.out.println(Arrays.toString(getDiagonal(input, row, column)));

	  }
	  /*
	   * =========================================================================
	   *  Method getRow(): gets the row of the index.
	   *
	   *  Input  : Matrix matrix -- the matrix
	   *           int row -- the row index
	   *  Output : int[] -- the row
	   * =========================================================================
	   */

	  public static int[] getRow(Matrix matrix, int row) {
		  int matrixColumns = matrix.getColumnsNum();
		  int[] rowIndex = new int[matrixColumns]; 
		  for (int j = 0; j < matrixColumns; j++){
			  rowIndex[j] = matrix.getElement(row, j);

		  }
		  
	    return rowIndex;

	  }

	  /*
	   * =========================================================================
	   *  Method getColumn(): gets the column of the index.
	   *
	   *  Input  : Matrix matrix -- the matrix
	   *         : int column -- the column index
	   *  Output : int[] -- the column
	   * =========================================================================
	   */

	  public static int[] getColumn(Matrix matrix, int column) {
		  int matrixRows = matrix.getRowsNum();
		  int[] columnIndex = new int[matrixRows]; 
		  for (int j = 0; j < matrixRows; j++){
			  columnIndex[j] = matrix.getElement(j, column);
		  }
		  
	    return columnIndex;		  	    

	  }

	  /*
	   * =========================================================================
	   *  Method getDiagonal(): gets the diagonal that contains the element of the 
	   *    position specified by the indices.
	   *
	   *  Input  : Matrix matrix -- the matrix
	   *         : int row -- the row index
	   *         : int column -- the column index
	   *  Output : int[] -- the diagonal
	   * =========================================================================
	   */

	  public static int[] getDiagonal(Matrix matrix, int row, int column) {
		  int matrixRows = matrix.getRowsNum();
		  int matrixColumns = matrix.getColumnsNum();
		  int count = 0;
		  for (int i = 0; i < matrixRows; i++){
			  for (int m = 0; m < matrixColumns; m++){
				  if (matrix.inBounds(row - column + i, 0 + m)){ 
					  count++;
				  }
			  }
		  }
		  int[] diagonalIndex = new int[count/matrixColumns]; 
		  for (int j = 0; j < matrixRows && matrix.inBounds(row - column + j, 0 + j); j++) {
				  diagonalIndex[j] = matrix.getElement(row - column + j, 0 + j);
	
			  }
			  
		  return diagonalIndex;
	  }

	 

}
