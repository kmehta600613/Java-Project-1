/*
 This program should ask the user to enter a password, compare it with the given admin and guest passwords, and give the user 3 attempts
 in total if the password fails.
 */

import java.util.Scanner;
public class PasswordVerifier {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		String ADMIN_PASSWORD = "admin";
		String GUEST_PASSWORD = "guest";
		/*
		 These are the passwords given by the question and the user's attempts are verified against these passwords.
		 */
		System.out.println("Welcome to The Password Verifier");
		System.out.println("--------------------------------");
		int i = 3; 
                /* The variable "i" is initialized with the value of 3 so that the loop can count backwards (i.e. 3, 2 and then 1) and also so that the while loop 
                iterates only 3 times.
                */
		while ( i >= 1 ) {
			Scanner keyboard = new Scanner(System.in);
			System.out.print("Please Enter the password " + "(" + i + " attempt(s) left): ");  
            /*
             "i" here will start with 3 and go backwards so it makes it clear how many attempts the user has left 
            */
			String userPass = keyboard.next();
			int adminCheck = userPass.compareTo(ADMIN_PASSWORD);
			int guestCheck = userPass.compareTo(GUEST_PASSWORD);
			
			if ( adminCheck == 0 ) {
				System.out.println("Verified as administrator!");
				break;
			/*
			 If the user's input matches the admin password, then the user is verified as the administrator and the program is terminated.
			 */
			} else if (guestCheck == 0) {
				System.out.println("Verified as guest!");
				break;
			} else {
				System.out.println("Verification failed!");
			/*
			 If the user's input matches the guest password, then the user is verified as guest and the program is terminated. Otherwise, the program 
                         outputs a verifitcation failure.
			 */
			  if (i == 1) {
				  System.out.println("All verification attempts failed!");
			/*
			 If verification fails at the last attempt (i.e. when i = 1), then the program outputs that all verification attempts failed and the loop 
                         continues.
			 */
			  }
			}
			i--; // This is what allows the loop to count backwards.
		}
	
				
		

	}

}
